{"version":3,"sources":["hook/UseStyles.jsx","zoom/Zoom.jsx","form/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","stylePath","useEffect","console","log","head","document","link","createElement","type","rel","href","appendChild","removeChild","Zoom","meetConfig","isSubmitted","status","ZoomMtg","setZoomJSLib","preLoadWasm","prepareJssdk","generateSignature","meetingNumber","apiKey","apiSecret","role","success","res","setTimeout","signature","init","leaveUrl","isSupportAV","join","userName","passWord","error","joinMeeting","result","Form","handleSubmit","config","handleChange","userEmail","className","onSubmit","htmlFor","value","onChange","id","placeholder","API_KEYS","process","PATH","formCssUrl","mainCssUrl","zoomConfig","App","useState","setConfig","setIsSubmitted","e","preventDefault","length","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a221721f.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\n\n\nconst useStyles = ( stylePath ) => {\n//   const [ stylePath, setStylePath ] = useState(\"style1.css\");\n    \n//   const handleButtonClick = () => {\n//     setStylePath({stylePath: 'style2.css'});\n//   }\n\n  useEffect(() => {\n      console.log(\"stlye path ::\", stylePath)\n    var head = document.head;\n    var link = document.createElement(\"link\");\n\n    link.type = \"text/css\";\n    link.rel = \"stylesheet\";\n    link.href = stylePath;\n\n    head.appendChild(link);\n\n    return () => { head.removeChild(link); }\n\n  }, [stylePath]);\n\n  return stylePath;\n};\n\n\nexport default useStyles ","import React, { useEffect } from \"react\";\nimport { ZoomMtg } from \"@zoomus/websdk\";\n\n\n\nconst joinMeeting = (signature, meetConfig) => {\n  ZoomMtg.init({\n    leaveUrl: meetConfig.leaveUrl,\n    isSupportAV: true,\n    success: function (success) {\n      console.log(\"Init Success \", success);\n      console.log(\"meetConfig : \", meetConfig);\n      ZoomMtg.join({\n        meetingNumber: meetConfig.meetingNumber,\n        userName: meetConfig.userName,\n        signature: signature,\n        apiKey: meetConfig.apiKey,\n        passWord: meetConfig.passWord,\n\n        success: (success) => {\n          console.log(success);\n        },\n\n        error: (error) => {\n          console.log(error);\n        },\n      });\n    },\n  });\n}\n\nconst Zoom = ({meetConfig, isSubmitted}) => {\n\n  console.log(\"meetConfig::\", meetConfig)\n  console.log(\"isSubmitted::\", isSubmitted)\n  useEffect(() => {\n    if(isSubmitted.status) {\n      // setZoomJSLib version 1.8.1 caused breaking, must be same as installed package verision\n      // installing this of version 1.7.x caused breaking\n      console.log(\"called\")\n      ZoomMtg.setZoomJSLib(\"https://source.zoom.us/1.8.1/lib\", \"/av\");\n      ZoomMtg.preLoadWasm();\n      ZoomMtg.prepareJssdk();\n  \n      /**\n       * You should not visible api secret key on frontend\n       * Signature must be generated on server\n       * https://marketplace.zoom.us/docs/sdk/native-sdks/web/essential/signature\n       */\n      ZoomMtg.generateSignature({\n        meetingNumber: meetConfig.meetingNumber,\n        apiKey: meetConfig.apiKey,\n        apiSecret: meetConfig.apiSecret,\n  \n        role: meetConfig.role,\n        success: function (res) {\n          console.log(\"res\", res);\n  \n          setTimeout(() => {\n            joinMeeting(res.result, meetConfig);\n          }, 1000);\n        },\n      });\n    }\n\n  }, [meetConfig, isSubmitted]);\n\n  return <></>;\n}\n\nexport default Zoom;\n","import React from 'react'\n\nconst Form = ({ handleSubmit, config, handleChange }) => {\n    const { userName, userEmail } = config\n    return (\n        <>\n          <div className=\"custom-zn__container\">\n        <div className=\"custom-zm__modal\">\n          <div className=\"custom-zm__title__box\">\n            <h1 className=\"custom-zm__title\">Welcome to Zoom</h1>\n          </div>\n          <form onSubmit={handleSubmit}>\n            <label className=\"custom-zm__modal__label\" htmlFor=\"userName\">\n              User Name (required*)\n              <input\n                type=\"text\"\n                value={userName}\n                className=\"custom-zm__modal__input\"\n                onChange={handleChange}\n                id=\"userName\"\n                placeholder=\"User Name\"\n              />\n            </label>\n            <label className=\"custom-zm__modal__label\" htmlFor=\"userEmail\">\n              Email (optional)\n              <input\n                type=\"email\"\n                value={userEmail}\n                className=\"custom-zm__modal__input\"\n                onChange={handleChange}\n                id=\"userEmail\"\n                placeholder=\"Email\"\n              />\n            </label>\n            <div className=\"custom-zm__btn__box\">\n              <button className=\"custom-zm__btn\" type=\"submit\">\n                Submit\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>   \n        </>\n    )\n}\n\n\nexport default Form\n","import React, { useState } from \"react\";\nimport useStyles from \"./hook/UseStyles\";\nimport Zoom from \"./zoom/Zoom\";\nimport Form from \"./form/Form\";\n\nconst API_KEYS = {\n  apiKey: process.env.REACT_APP_ZOOM_API_KEY,\n  apiSecret: process.env.REACT_APP_ZOOM_API_SECRET_KEY,\n};\n\nconst PATH = {\n  formCssUrl: process.env.REACT_APP_ZOOM_FORM_CSS_URL,\n  mainCssUrl: process.env.REACT_APP_ZOOM_MAIN_CSS_URL,\n};\n\nconsole.log(\"api key ::\", API_KEYS.apiKey);\nconsole.log(\"api key ::\", API_KEYS.apiSecret);\nconsole.log(\"PATH ::\", PATH);\n\nconst zoomConfig = {\n  apiKey: API_KEYS.apiKey,\n  apiSecret: API_KEYS.apiSecret,\n  meetingNumber: \"5784065719\",\n  leaveUrl: \"https://www.salin.co.kr/epiclive/index.html\",\n  userName: \"\", // (required)\n  userEmail: \"\", // (optional) must be the attendee email address\n  passWord: \"GudBG9\", //this is the passcode for meeting room, not for user password\n  role: 0, // 0 for guest, 1 for host\n};\n\nconst App = () => {\n  const [config, setConfig] = useState(zoomConfig);\n  const [isSubmitted, setIsSubmitted] = useState({\n    stylePath: PATH.formCssUrl,\n    status: false,\n  });\n  const { userName } = config;\n  const { stylePath } = isSubmitted;\n\n  const handleChange = (e) => {\n    setConfig({\n      ...config,\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!userName.length) return;\n\n    setIsSubmitted({\n      stylePath: PATH.mainCssUrl,\n      status: true,\n    });\n  };\n\n  useStyles(stylePath);\n\n  return (\n    <>\n      <Form\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        config={config}\n      />\n      <Zoom isSubmitted={isSubmitted} meetConfig={config} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}